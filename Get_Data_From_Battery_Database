import pandas
import math
import numpy as np


from Get_Data_From_Cell import Get_Data_From_Cell # row -3, column -2
from Get_Data_From_Cell import Get_Data_EVs # row -2, colum -1

# Load the Excel file
# battery_database = pd.read_excel("Battery database from open source_CellDatabase_v6.xlsx", sheet_name="RAW DATA")

# # Convert each row into a list
# batteries_as_arrays = battery_database.values.tolist()

battery_index = 11  # row -3
stat_index = 17  # column -2

cell_data = Get_Data_From_Cell(battery_index, stat_index)


EV_number = 3 # column number of the selected EV

# Data retrieved from the excel sheet containing EV database
EV_required_capacity = Get_Data_EVs(7, EV_number)
cell_energy_capacity = Get_Data_EVs(33, EV_number)

min_pack_voltage = Get_Data_EVs(21, EV_number)
max_pack_voltage = Get_Data_EVs(20, EV_number)

min_cell_voltage = Get_Data_EVs(31, EV_number)
max_cell_voltage = Get_Data_EVs(29, EV_number)

peak_discharge_power = 190512#Get_Data_EVs(12, EV_number)

peak_cell_current = Get_Data_EVs(34, EV_number)
nominal_pack_capacity = Get_Data_EVs(19, EV_number)
cell_capacity = Get_Data_EVs(32, EV_number)

# Calculate the minimum number of cells required for the EV capacity requirement
min_cells = EV_required_capacity/cell_energy_capacity

# Calculate the min and max number of cells in series for EV voltage requirements
min_cells_series = math.ceil(min_pack_voltage/min_cell_voltage)
max_cells_series = math.ceil(max_pack_voltage/max_cell_voltage)

# Calculate the min and max number of cells in parallel for EV requirements
min_cells_parallel = math.ceil(min_cells/max_cells_series)
max_cells_parallel = math.ceil(nominal_pack_capacity/cell_capacity)
# print(max_cells_parallel, min_cells_parallel)

no_cells_series = min_cells_series
no_cells_parallel = min_cells_parallel

max_pack_current = peak_discharge_power/max_pack_voltage

while no_cells_parallel <= max_cells_parallel:
    if (peak_cell_current * no_cells_parallel * min_cell_voltage * no_cells_series) < peak_discharge_power:
        
        result = peak_cell_current * no_cells_parallel * min_cell_voltage * no_cells_series
        # print(peak_discharge_power, result, no_cells_parallel, no_cells_series)

        if peak_discharge_power - (peak_cell_current * no_cells_parallel * min_cell_voltage * no_cells_series) < \
           peak_cell_current * no_cells_parallel * ((min_cell_voltage * max_cells_series) - (min_cell_voltage * min_cells_series)):

            if no_cells_series < max_cells_series:
                no_cells_series += 1

        else:
            if no_cells_parallel < max_cells_parallel:
                no_cells_parallel += 1
            else:
                print("No combination found")
                break
        
    else:
        
        result = peak_cell_current * no_cells_parallel * min_cell_voltage * no_cells_series
        print(f"Combination found, Series: {no_cells_series} Parallel: {no_cells_parallel}")
        
        no_cells_series = min_cells_series
        no_cells_parallel += 1


